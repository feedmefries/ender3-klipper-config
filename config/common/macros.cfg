#####################################################################
#  Terminal and display printing macro
#####################################################################
##  action_respond_info will be always executed at the beginning of an macro evaluation.
##  Use _PRINT_AR if you need the order of several console outputs in the order given by the macro
##  Use: _PRINT_AR T="QGL forced by PRINT_START"
[gcode_macro _PRINT_AR]
description: Helper: Action response
gcode:
  {% if params.SHOW_LCD|default('true') == 'true' %} 
    M117 {params.T}
  {% endif %}
  {action_respond_info(params.T)}

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  {% set filament = printer["gcode_macro _USER_VARIABLE"].filament %}
  PAUSE_BASE
  G91 # use relative positioning
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{filament.retract.pause} F2100 # retract a bit
  {% else %}
    _PRINT_AR T="Extruder not hot enough"
  {% endif %}
  PARK LOCATION='rearright' RAISE='false'

# --------------------------- End Print ------------------------------
[gcode_macro END_PRINT]
gcode:
  {% set filament = printer["gcode_macro _USER_VARIABLE"].filament %}
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91 # switch to relative positioning
    G1 E{filament.retract.end} F2100
  {% else %}
    _PRINT_AR T="Extruder not hot enough to retract"
  {% endif %}
  TURN_OFF_HEATERS
  PARK LOCATION='rearright' RAISE='true'
  _PRINT_AR T="Print Complete!"

# --------------------------- Start Print ----------------------------

[gcode_macro START_PRINT]
gcode:
  {% set T_BED = params.T_BED|default(65)|float %}
  {% set T_EXTRUDER = params.T_EXTRUDER|default(220) %}
  {% set SOAK_BED = params.SOAK_BED|default('false') %}
  {% set LEVEL_BED = params.LEVEL_BED|default('true') %}
  G90 # switch to absolute positioning
  _PRINT_AR T="Waiting for temperature"
  M140 S{T_BED}
  M190 S{T_BED} # wait till bed temp is reached, then continue
  # heat soak
  {% if SOAK_BED == 'true' %}
    _PRINT_AR T="Soaking the bed..."
    _PRINT_AR T="3 minutes remaining"
    G4 P60000
    _PRINT_AR T="2 minutes remaining"
    G4 P60000
    _PRINT_AR T="1 minute remaining"
    G4 P60000
  {% endif %}
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28 # home all axis
  {% endif %}
  {% if LEVEL_BED == 'true' %}
    CALIBRATE # leve the bed
  {% endif %}
  # wait for the extruder to reach the target temp
  M109 S{T_EXTRUDER}
  # Prime line
  PRIME_LINE
  _PRINT_AR T="Printing..."

[gcode_macro FIRMWARE_RESTART]
rename_existing: FIRMWARE_RESTART_BASE
gcode:
  _PRINT_AR T="Restarting the firmware"
  # if the printer is homed then move the bed to the max y position before restarting
  # this is to prevent the bed from crashing into the endstop when the stepper motors are disabled
  {% if printer.toolhead.homed_axes|length > 0 %}
    # use absolute positioning
    G90
    # move the bed to the max y position
    G1 Y{printer["gcode_macro _USER_VARIABLE"].bed.max.y} F3000
  {% endif %}
  FIRMWARE_RESTART_BASE

# ---------------------------- Prime Line -----------------------------
# prime the nozzle 
[gcode_macro PRIME_LINE]
gcode:
  SAVE_GCODE_STATE NAME=prime_line
  {% set config = printer["gcode_macro _USER_VARIABLE"] %}
  {% set prime = config.prime %}
  {% set pos = prime.pos %}
  {% set dir = prime.dir %}
  {% set spacing = prime.spacing %}
  {% set num_segments = prime.seg %}
  {% set length_per_seg = prime.length_per_seg %}
  {% set extrude_per_seg = prime.extrude_per_seg %}
  LOW_TEMP_CHECK # make sure the extruder is at temperature
  G90 # use absolute positioning
  G92 E0 # reset extruder
  G1 Z10 F240 # move to z = 10
  G1 X{pos.x} Y{pos.y} F3000 # move to the start of the prime line
  G1 Z{pos.z} F240 # set the z height of the prime line

  _PRINT_AR T="Print prime line"
 
  G91 # use relative positioning
  {% for i in range(num_segments) %}
    {% if dir == "Y+" %}
      G1 Y{length_per_seg} F1500 E{extrude_per_seg}
      G1 Y{spacing} F1500
    {% elif dir == "Y-" %}
      G1 Y-{length_per_seg} F1500 E{extrude_per_seg}
      G1 Y-{spacing} F1500
    {% elif dir == "X+" %}
      G1 X{length_per_seg} F1500 E{extrude_per_seg}
      G1 X{spacing} F1500
    {% elif dir == "X-" %}
      G1 X-{length_per_seg} F1500 E{extrude_per_seg}
      G1 X-{spacing} F1500
    {% else %}
      _PRINT_AR T="Unknown direction '{dir}'. Use 'Y+', 'Y-', 'X+' or 'X-'."
    {% endif %}
  {% endfor %}
  G90 # switch back to absolute positioning
  # Reset Extruder
  G92 E0
  G1 X{pos.x} Y{pos.y} F3000 # swipe the tool head over the prime line in an attempt to clean any extra filament from the hotend 
  G1 Z5.0 F300 # move z axis up a bit
  RESTORE_GCODE_STATE NAME=prime_line

[gcode_macro LOAD_FILAMENT]
# M701
gcode:
  SAVE_GCODE_STATE NAME=loading_filament
  {% set filament = printer["gcode_macro _USER_VARIABLE"].filament %}
  {% set load_distance = filament.load_distance %}
  {% set load_extrude = filament.load_extrude %}
  PARK LOCATION='rearright' RAISE='false' # park
  _PRINT_AR T="Loading Filament"
  M83 # switch to relative positioning for the extruder
  G92 E0.0 # reset extruder
  LOW_TEMP_CHECK # ensure the extruder is at a suitable temperature
  _PRINT_AR T="Loading..." 
  G1 E80 F200  # rough length of tube between direct drive until nozzle
  M400 # wait for the extrude to complete
  _PRINT_AR T="Priming the nozzle"
  G1 E20 F100  # some extra to prime the nozzle --> slower
  M400 # wait for the extrude to complete 
  G92 E0.0 # reset the extruder
  RESTORE_GCODE_STATE NAME=loading_filament

[gcode_macro UNLOAD_FILAMENT]
# M702
gcode:
  SAVE_GCODE_STATE NAME=unloading_filament
  {% set filament = printer["gcode_macro _USER_VARIABLE"].filament %}
  {% set unload_distance = filament.unload_distance %}
  PARK LOCATION='rearright' RAISE='false'
  _PRINT_AR T="Unloading Filament"
  LOW_TEMP_CHECK # ensure the extruder is at a suitable temperature
  G91 # set relative
  G1 E10 F100 # extrude a bit? why?
  G92 E0.0 # reset extruder
  _PRINT_AR T="Retracting filament"
  G1 E-{unload_distance} F400 # retract the entire unload_distance
  G92 E0.0
  M400 # wait for retraction to complete
  _PRINT_AR T="Retraction complete."
  _PRINT_AR T="Load filament with the LOAD_FILAMENT macro"
  RESTORE_GCODE_STATE NAME=unloading_filament

# filament change 
[gcode_macro FILAMENT_CHANGE]
# M600
gcode:
  _PRINT_AR T="Filament Change!!"
  SAVE_GCODE_STATE NAME=filament_change
  PAUSE
  LOW_TEMP_CHECK
  G91 # relative
  G1 E-1 F300 # retract 1
  UNLOAD_FILAMENT # unload
  _PRINT_AR T="Switch the filament now."
  _PRINT_AR T="To resume, use 'LOAD_FILAMENT' then 'RESUME'"
  RESTORE_GCODE_STATE NAME=filament_change

[gcode_macro MOTORS_OFF] 
gcode:
  M84 X Y E ; disable motors x y and extruder

[gcode_macro CALIBRATE]
gcode:
  SAVE_GCODE_STATE NAME=G29_state # bed mesh calibrate
  G28 # home
  G0 Z10 # shift the z-axis up 10mm
  BED_MESH_CALIBRATE profile=ender3
  BED_MESH_PROFILE load=ender3
  RESTORE_GCODE_STATE NAME=G29_state MOVE=0

## use BED_MESH_STORE                       -> generate MESH and park in the middle
## use BED_MESH_STORE SAVE=now              -> generate MESH and park in the middle and save immediately 
## use BED_MESH_STORE PARK=false            -> generate MESH
## use BED_MESH_STORE SAVE=later            -> generate MESH and park in the middle and save it later 
[gcode_macro BED_MESH_STORE]
description: Generate a mesh, name it and run save_config if requested
variable_save_at_end: False
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  {% set name = '' if printer.save_variables.variables.plates is not defined 
      else printer.save_variables.variables.plates.array[printer.save_variables.variables.plates.index].name + '-' %}
  {% set mesh_name = name + "Bed_Temp-" + printer.heater_bed.target|int|string + "C" %}
  {action_respond_info("BED_MESH: Generate \"%s\"" % mesh_name)}
  BED_MESH_CALIBRATE PROFILE={mesh_name}
  {% if params.PARK|default('true')|lower == 'true' %}
    G90                                                                  ; set absolute
    G0 Z{user.park.bed.z} F{user.speed.z_hop}                            ; lift first
    G0 X{user.park.bed.x} Y{user.park.bed.y} F{user.speed.travel}         ; park toolhead
    {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %} ; set it back to relative
  {% endif %}
  {% if params.SAVE|default('none')|lower == 'now' %}
    _PRINT_AR T="BED_MESH: Save Config!"
    SAVE_CONFIG
  {% elif params.SAVE|default('none')|lower == 'later' %}
    _PRINT_AR T="BED_MESH: Save Config after print done"
    SET_GCODE_VARIABLE MACRO=BED_MESH_STORE VARIABLE=save_at_end VALUE=True
  {% endif %}


## use BED_MESH_LOAD           -> load an existing MESH
## use BED_MESH_LOAD AUTO=true -> load an existing MESH or generate a new one and prepare it to be saved after print end
[gcode_macro BED_MESH_LOAD]
description: Load an existing mesh or generate a new one
gcode:
  {% set name = '' if printer.save_variables.variables.plates is not defined 
           else printer.save_variables.variables.plates.array[printer.save_variables.variables.plates.index].name + '-' %}
  {% set mesh_name = name + "Bed_Temp-" + printer.heater_bed.target|int|string + "C" %}
  {% if printer.configfile.config["bed_mesh " + mesh_name] is defined %}
    {action_respond_info("BED_MESH: \"%s\" loaded" % mesh_name)}
    BED_MESH_CLEAR
    BED_MESH_PROFILE LOAD={mesh_name}
  {% elif params.AUTO|default('false')|lower == 'true' %}
    {action_respond_info("BED_MESH: \"%s\" needs to be generated" % mesh_name)}
    BED_MESH_STORE SAVE=none PARK=false
  {% else %}
    {action_respond_info("BED_MESH: ERROR \"%s\" not defined" % mesh_name)}
  {% endif %}

## add this to your PRINT_END to save a mesh if needed 10 seconds after print ended
## UPDATE_DELAYED_GCODE ID=_BED_MESH_SAVE DURATION=10
[delayed_gcode _BED_MESH_SAVE]
gcode:
  {% if printer["gcode_macro MESH_STORE"].save_at_end %}
    _PRINT_AR T="BED_MESH: Save Config!"
    SAVE_CONFIG
  {% endif %}


[gcode_macro LOW_TEMP_CHECK]
gcode:
  {% set T_EXTRUDER = params.T_EXTRUDER|default(220) %}
  {% if printer.extruder.target != 0 %} # if there is a setpoint for extruder
    {% if printer.extruder.temperature < printer.extruder.target %} # if not reached, heat
      _PRINT_AR T="Heating extruder from {printer.extruder.temperature}c to {printer.extruder.target}c."
      M109 S{printer.extruder.target|float}
    {% endif %}
  {% else %} # if no setpoint for extruder
    {% if printer.extruder.target < T_EXTRUDER %}  # heat to T.
      _PRINT_AR T="Heating extruder to {T_EXTRUDER}c."
      M109 S{T_EXTRUDER}
    {% endif %}
  {% endif %}
  _PRINT_AR T="The extruder has reached {T_EXTRUDER}c."    

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  {% set filament = printer["gcode_macro _USER_VARIABLE"].filament %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91 # switch to relative positioning
    G1 E{filament.retract.pause} F2100
  {% else %}
    _PRINT_AR T="Extruder not hot enough"
  {% endif %}  
  RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  {% set filament = printer["gcode_macro _USER_VARIABLE"].filament %}
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91 # switch to relative positioning
    G1 E{filament.retract.cancel} F2100
  {% else %}
    _PRINT_AR T="Extruder not hot enough to retract"
  {% endif %}    
  TURN_OFF_HEATERS
  PARK LOCATION='rearright' RAISE='true'
  CANCEL_PRINT_BASE

[gcode_macro M125]
gcode:
  PARK LOCATION='rearright' RAISE='false'

# Park toolhead
[gcode_macro PARK]
gcode:
  SAVE_GCODE_STATE NAME=parking
  {% set self = printer['gcode_macro _USER_VARIABLE'] %}
  {% set park = self.park %}
  {% set LOCATION = params.LOCATION|default('frontleftscrew') %}
  {% set RAISE = params.RAISE|default('true') %}

  _PRINT_AR T='Moving to park position "{LOCATION}"'
  {% if RAISE == 'true' %}
    G91 # switch to relative positioning
    G0 Z20 F600 # increase the z position by 20mm
  {% endif %}
  G90 # switch to absolute positioning
  # TODO: figure out how to dynamically access nested objects as this bs below is disgusting
  {% if LOCATION == 'frontleftscrew' or LOCATION == 'home' %}
    G0 X{park.frontleftscrew.x} Y{park.frontleftscrew.y} F4000 # move to the front left screw park position (home)
  {% elif LOCATION == 'rearright' or LOCATION == 'pause' %}
    G0 X{park.rearright.x} Y{park.rearright.y} F4000 # move to rear right park position
  {% elif LOCATION == 'rearcenter' %}
    G0 X{park.rearcenter.x} Y{park.rearcenter.y} F4000 # move to the rear center  park position
  {% elif LOCATION == 'rearleft' %}
    G0 X{park.rearleft.x} Y{park.rearleft.y} F4000 # move to the rear left park position
  {% elif LOCATION == 'frontright' %}
    G0 X{park.frontright.x} Y{park.frontright.y} F4000 # move to the front right park position
  {% elif LOCATION == 'frontcenter' %}
    G0 X{park.frontcenter.x} Y{park.frontcenter.y} F4000 # move to the front center park position
  {% elif LOCATION == 'frontleft' %}
    G0 X{park.frontleft.x} Y{park.frontleft.y} F4000 # move to the front left park position
  {% elif LOCATION == 'center' %}
    G0 X{park.center.x} Y{park.center.y} F4000 # move to the center park position
  {% else %}
    _PRINT_AR T='No park definition named "{LOCATION}". Falling back to the "pause" park location'
    G0 X{park.rearright.x} Y{park.rearright.y} F4000 # move to pause park position
  {% endif %}
  M400 # wait for park to complete
  _PRINT_AR T='Parking complete.'
  RESTORE_GCODE_STATE NAME=parking

[gcode_macro CLEAR_BED]
gcode:
  {% set self = printer['gcode_macro _USER_VARIABLE'] %}
  {% set bed = self.bed %}
  {% set bed_clearing = self.bed_clearing %}
  {% set sweep_count = bed_clearing.sweeps %}
  {% set sweep_size = (bed.max.x - bed.min.x) / bed_clearing.sweeps %}
  {% set safe_z = bed_clearing.safe_z %} # since our z = 0 position is calculated by the bl touch probe, and we also utilize the screws_tilt_calculate macro,
  # we can safely set safe_z to a small value and be confident that our bed will not be scratched
  {% set speed = bed_clearing.speed %}
  {% set temperature = bed_clearing.temperature %}

  {% if bed_clearing.enabled == True %}
    _PRINT_AR T="Clearing the previous print from the bed..."
    PARK LOCATION='rearright' RAISE='false' # move to the rear right park location
    {% if printer.heater_bed.temperature > temperature %}
      _PRINT_AR T="Waiting for bed to reach a temp lower than {temperature}c"
      M190 S{temperature} # wait for bed temp to reach the minimum temperature
      M400
      _PRINT_AR T="Temperature reached. Starting to clear the bed."
      M140 S0 # turn off the bed heater
    {% endif %}
    # perform a single sweep to remove all objects > 30mm with the x-axis bar
    _PRINT_AR T="Performing initial sweep to remove objects with a height greater than 30mm"
    G90 # use absolute positioning
    G0 Z{safe_z} F{speed.z} # move to safe z
    M400 # wait for move to complete
    G0 Y-5 F{speed.y} # move to y = -5
    M400 # wait for move to complete
    G0 Z35 F{speed.z} # move to z = 35
    M400 # wait for the move to complete
    PARK LOCATION='rearleft' RAISE='false' # move to the "rearleft" park location
    # in the "rearleft" park location, the toolhead is located at x=0 and y~230.
    # This allows us to immediately sweep in the -Y direction to clear any objects that are < 30mm
    # in height from the bed. This also clears any objects immediately in front of the toolhead
  
    # make 10 sweeps across the bed
    {% for sweep in range(sweep_count) %}
      _PRINT_AR T="Performing sweep {(sweep + 1)} out of {sweep_count}."
      G90 # use absolute positioning
      G0 Z{safe_z} F{speed.z} # move to safe_z
      M400 # wait for move to complete
      G0 Y-5 F{speed.y} # move to y = -5
      M400 # wait for move to complete
      G0 Z35 F{speed.z} # move the z axis up 35 mm. the x-axis bar is 30mm from the bed
      # we can assume that the first sweep will remove any objects >30mm in height from the bed
      G91 # use relative positioning
      G0 X{sweep_size} Y{bed.max.y} F13200 # shift over one sweep segment
      M400 # wait for move to complete
    {% endfor %}
    # finish the rest of the final sweep
    G90 # use aboslute positioning
    G0 Z{safe_z} F{speed.z} # move to safe_z
    M400 # wait for move to complete
    G0 Y-5 F{speed.y} # move to y = -5
    M400 # wait for move to complete.
    PARK LOCATION='{bed_clearing.parkpos}' RAISE='false'
    _PRINT_AR T="Bed clearing complete."
  {% else %}
    _PRINT_AR T="Bed clearing disabled. Skipping."
  {% endif %}
