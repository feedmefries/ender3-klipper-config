# macro that run at klipper start
[delayed_gcode _INIT]
initial_duration: 1
gcode:
  _USER_VARIABLE # initialize printer variables
  _CHECK_CONSITENT # ensure that all necessary prerequisites are configured 
  _EXECUTE_AT_INIT # execute init code

[gcode_macro _EXECUTE_AT_INIT]
description: Helper: Everything that should run at klipper start
gcode:
  _PRINT_AR T="Homing..."
  G28 # home
  SCREWS_TILT_CALCULATE
  _PRINT_AR T="Klipper INIT done"

[gcode_macro _CHECK_CONSITENT]
description: Helper: Check that some criterias are meet in the printer.cfg
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  {% set text = ["CONFIG: ERROR"] %}
  {% if user.run is not defined %}
    {% set _dummy = text.append("_USER_VARIABLE macro missing") %}
  {% elif not user.run %}
    {% set _dummy = text.append("_USER_VARIABLE macro not executed") %}
  {% endif %}
  {% if 'save_variables' not in printer %}
    {% set _dummy = text.append("[save_variables] missing") %}
  {% endif %}
  {% if 'virtual_sdcard' not in printer %}
    {% set _dummy = text.append("[virtual_sdcard] missing") %}
  {% endif %}
  {% if text|length > 1 %}
    {action_respond_info(text|join("\n"))}
  {% endif %}

[gcode_macro _USER_VARIABLE]
description: Helper: Contains User defined printer variables
# variable_probe: {}
variable_bed_clearing: {}
variable_bed: {}
variable_park: {}
variable_filament: {}
variable_unload_sd: False
variable_prime: {}
variable_run: False
gcode:
  ##### Parking #####
  {% set user_park_z_max_delta = 40 %}              #
  {% set user_park_at_cancel = True %}              # park head at CANCEL_PRINT if not paused [False/True]
  ##### Filament #####
  {% set user_load_distance = 90 %}                 # load distance while load filament
  {% set user_load_extrude = 30 %}                  # extrude distance while load filament
  {% set user_unload_distance = 100 %}              # unload distance while unload filament
  {% set user_retract_end = 5 %}                    # retract distance at PRINT_END or CANCEL_PRINT
  {% set user_retract_pause = 2 %}                  # retract/extrude distance while PAUSE or RESUME
  ##### PRINT_START/STOP #####
  {% set user_unload_sd = True %}                   # unload sd file at PRINT_END or CANCEL_PRINT [True,False]
  ##### Speeds #####
  {% set user_speed_move_xy = 220 %}                # The speed in mm/s to perform non-printing moves in the x or y direction # todo: export this in a dictionary               
  ##### Prime Line #####
  {% set user_prime_start_xy = [2.0,0.5] %}         # the starting coordinates of the prime line
  {% set user_prime_z = 0.4 %}                      # the prime line layer height
  {% set user_prime_dir = 'X+' %}                   # the direction of prime line (X+, X-, Y+, Y-)
  {% set user_prime_spacing = 1.4 %}                # distance between lines
  {% set user_prime_length = 200 %}                 # the length of prime line
  {% set user_prime_seg = 11 %}                     # the segments in that the prime line is splitted
  {% set user_prime_extrude_per_seg = 6 %}          # amount of filament extruded per segment in mm
  ##### Bed Clearing #####
  {% set user_bed_clearing_enabled = True %}        # whether or not bed clearing is enabled on the system
  {% set user_bed_clearing_sweeps = 4 %}            # the number of sweeps to perform when clearing the bed
  {% set user_bed_clearing_speed_y = 20 %}          # the speed, in mm/s, in which to clear the bed in the Y direction
  {% set user_bed_clearing_speed_z = 20 %}          # the z-axis speed in mm/s
  {% set user_bed_clearing_park_pos = 'rearleft' %} # the park position for the toolhead when the bed clearing process completes
  {% set user_bed_clearing_safe_z = 0.2 %}          # the safe-z position for clearing the bed. The lower the value the better, but this risks scratching the print bed
  {% set user_bed_clearing_minimum_temp = 28 %}     # the minimum bed temperature to wait for before initiating the bed clearing process
  ###################################################################
  ##                      end of user defines                      ## 
  ###################################################################
  {% set min = {'x': -3, 'y': -14, 'z': 0 } %}
  {% set max = {'x': 260, 'y': 230, 'z': 240 } %}
  # calculate necessary values
  {% set bed = {'min': {'x': 0, 'y': 0, 'z': 0    },
                'max': {'x': 230, 'y': max.y, 'z': max.z},
                'screws': {
                  'frontleft':  {'x': 79,  'y': 40},
                  'frontright': {'x': 246, 'y': 40},
                  'rearright': {'x': 246, 'y': 209},
                  'rearleft': {'x': 79, 'y': 209}
                }} %}
  {% set calc_center = {'x': (bed.max.x - bed.min.x) / 2,
                        'y': (bed.max.y - bed.min.y) / 2, 
                        'z': (bed.max.z - bed.min.z) / 2} %}
  {% set calc_park = {'min': {'x': (min.x + 1),
                              'y': (min.y + 1),
                              'z': min.z},
                      'max': {'x': (max.x - 1),
                              'y': (max.y - 1),
                              'z': max.z - user_park_z_max_delta}} %}
  # prepare dictonaries
  {% set bed_clearing_dic = {'enabled': user_bed_clearing_enabled,
                             'sweeps': user_bed_clearing_sweeps,
                             'speed': {'y': (user_bed_clearing_speed_y * 60), 'z': (user_bed_clearing_speed_z * 60)},
                             'parkpos': user_bed_clearing_park_pos,
                             'temperature': user_bed_clearing_minimum_temp,
                             'safe_z': user_bed_clearing_safe_z } %}
  {% set park_dic = {'center'         : {'x': calc_center.x,   'y': calc_center.y },
                     'frontleftscrew' : {'x': bed.screws.frontleft.x, 'y': bed.screws.frontleft.y },
                     'frontleft'      : {'x': calc_park.min.x, 'y': calc_park.min.y},
                     'frontcenter'    : {'x': calc_center.x,   'y': calc_park.min.y},
                     'frontright'     : {'x': calc_park.max.x, 'y': calc_park.min.y},
                     'rearleft'       : {'x': calc_park.min.x, 'y': calc_park.max.y},
                     'rearcenter'     : {'x': calc_center.x,   'y': calc_park.max.y},
                     'rearright'      : {'x': calc_park.max.x, 'y': calc_park.max.y},
                     'z'              : {'min': calc_park.min.z, 'max': calc_park.max.z },
                     'park_at_cancel' : user_park_at_cancel} %}
  {% set filament_dic = {'load_distance'    : user_load_distance,
                          'load_extrude'    : user_load_extrude,
                          'unload_distance' : user_unload_distance,
                          'retract'         : {'end'   : user_retract_end,
                                              'pause' : user_retract_pause,
                                              'cancel': user_retract_end}} %}
  {% set prime_dic = {'pos'             : {'x':user_prime_start_xy[0], 'y':user_prime_start_xy[1], 'z':user_prime_z},
                      'dir'             : user_prime_dir,
                      'spacing'         : user_prime_spacing,
                      'length_per_seg'  : user_prime_length / user_prime_seg,
                      'seg'             : user_prime_seg,
                      'extrude_per_seg' : user_prime_extrude_per_seg} %}
  # store results in variables
  # _PRINT_AR T="bed: {bed}"
  # _PRINT_AR T="bed clearing: {bed_clearing_dic}"
  # _PRINT_AR T="park: {park_dic}"
  # _PRINT_AR T="filament: {filament_dic}"
  # _PRINT_AR T="unload sd: {user_unload_sd}"
  # _PRINT_AR T="prime: {prime_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=bed VALUE="{bed}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=bed_clearing VALUE="{bed_clearing_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=park VALUE="{park_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=filament VALUE="{filament_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=unload_sd VALUE={user_unload_sd}
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=prime VALUE="{prime_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=run VALUE=True
