#####################################################################
#  Terminal and display printing macro
#####################################################################
##  action_respond_info will be always executed at the beginning of an macro evaluation.
##  Use _PRINT_AR if you need the order of several console outputs in the order given by the macro
##  Use: _PRINT_AR T="QGL forced by PRINT_START"
[gcode_macro _PRINT_AR]
description: Helper: Action response
gcode:
  {% if params.SHOW_LCD|default('false') == 'true' %} M117 {params.T} {% endif %}
  {action_respond_info(params.T)}

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 

# --------------------------- End Print ------------------------------
[gcode_macro END_PRINT]
gcode:
  TURN_OFF_HEATERS
  CLEAR_BED # clear the bed
  _PRINT_AR T="Print Complete!"

# --------------------------- Start Print ----------------------------

[gcode_macro START_PRINT]
gcode:
  {% set T_BED = params.T_BED|default(65)|float %}
  {% set T_EXTRUDER = params.T_EXTRUDER|default(220) %}
  {% set SOAK_BED = params.SOAK_BED|default('false') %}
  {% set LEVEL_BED = params.LEVEL_BED|default('true') %}

  # Use absolute coordinates
  G90

  # Start heating and continue
  _PRINT_AR T="Waiting for temperature"
  M140 S{T_BED}
  M190 S{T_BED} # wait till bed temp is reached, then continue

  # heat soak
  {% if SOAK_BED == 'true' %}
    _PRINT_AR T="Soaking the bed..."
    _PRINT_AR T="3 minutes remaining"
    G4 P60000
    _PRINT_AR T="2 minutes remaining"
    G4 P60000
    _PRINT_AR T="1 minute remaining"
    G4 P60000
  {% endif %}

  # home
  G28
  # level the bed
  {% if LEVEL_BED == 'true' %}
    CALIBRATE
  {% endif %}

  # SET_GCODE_OFFSET Z=-.4

  # wait for the extruder to reach the target temp
  M109 S{T_EXTRUDER}

  # Prime line
  _PRINT_AR T="Print prime line"
  PRIME_LINE
  
  # Print message on LCD
  _PRINT_AR T="Printing..."

# ---------------------------- Prime Line -----------------------------
# prime the nozzle 
[gcode_macro PRIME_LINE]
gcode: 
  # Reset Extruder    
  G92 E0
  G1 Z10 F240
  # Move the nozzle very close to the bed
  G1 X2 Y10 F3000
  G1 Z0.28 F240
  G1 E10 F100 # load little filament
  # Reset Extruder
  G92 E0
  # Move Z Axis up
  G1 Z2.0 F5000
  # Move to start position
  G1 X2.1 Y20 Z0.28 F300
  # Draw the first line
  G1 X2.1 Y150 Z0.28 F1500 E30
  # Move to side a little
  G1 X2.4 Y150 Z0.28 F1500.0
  # Draw the second line
  G1 X2.4 Y20 Z0.28 F1500.0 E30
  # # Reset Extruder
  # G92 E0
  # Move Z Axis up
  G1 Z5.0 F300

# ---------------------------- Load Filament -------------------------

[gcode_macro LOAD_FILAMENT]
# M701
gcode:
  SAVE_GCODE_STATE NAME=loading_filament
  M125 # park
  _PRINT_AR T="Loading Filament"
  M83
  G92 E0.0
  LOW_TEMP_CHECK # ensure the extruder is at a suitable temperature
  _PRINT_AR T="Loading..." 
  G1 E80 F200  # rough length of tube between direct drive until nozzle
  _PRINT_AR T="Priming the nozzle"
  G1 E20 F100  # some extra to prime the nozzle --> slower 
  G92 E0.0
  RESTORE_GCODE_STATE NAME=loading_filament

# --------------------------------------------------------------------

# ---------------------------- Unload Filament -----------------------

[gcode_macro UNLOAD_FILAMENT]
# M702
gcode:
  SAVE_GCODE_STATE NAME=unloading_filament
  M125 # park
  _PRINT_AR T="Unloading Filament"
  LOW_TEMP_CHECK # ensure the extruder is at a suitable temperature
  G91 # set relative
  G1 E10 F100 
  G92 E0.0
  _PRINT_AR T="Retracting filament"
  G1 E-20 F1000 # retract 20mm quickly
  G1 E-150 F400 # retract 150mm
  G92 E0.0
  _PRINT_AR T="Retraction complete."
  _PRINT_AR T="Load filament with the LOAD_FILAMENT macro"
  RESTORE_GCODE_STATE NAME=unloading_filament

# ------------------------- Filament Change --------------------------
# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.    

# filament change 
[gcode_macro FILAMENT_CHANGE]
# M600
gcode:
  _PRINT_AR T="Filament Change!!"
  SAVE_GCODE_STATE NAME=filament_change
  PAUSE
  LOW_TEMP_CHECK
  G91 # relative
  G1 E-1 F300 # retract 1
  UNLOAD_FILAMENT # unload
  _PRINT_AR T="Switch the filament now."
  _PRINT_AR T="To resume, use 'LOAD_FILAMENT' then 'RESUME'"
  RESTORE_GCODE_STATE NAME=filament_change


# --------------------------------------------------------------------

# ------------------------- Motors Off -------------------------------

[gcode_macro MOTORS_OFF] 
gcode:
  M84 X Y E ; disable motors x y and extruder

# --------------------------------------------------------------------

# ------------------------- Bed Mesh Calibrate -----------------------
[gcode_macro CALIBRATE]
gcode:
  SAVE_GCODE_STATE NAME=G29_state
  G28
  # shift the z-axis up 10mm
  G0 Z10
  BED_MESH_CALIBRATE profile=ender3
  BED_MESH_PROFILE load=ender3
  RESTORE_GCODE_STATE NAME=G29_state MOVE=0

#--------------------------------------------------------------------

# ------------------------- Low Temp Check --------------------------
# LOW_TEMP_CHECK checks if there is a setpoint for the  extruder. Untested! 
# - If this setpoint is reached, continue. 
# - If not, heat to setpoint.
# - If no setpoint, heat to parameter T (default@200)
[gcode_macro LOW_TEMP_CHECK]
gcode:
    {% set T_EXTRUDER = params.T_EXTRUDER|default(220) %}
    {% if printer.extruder.target != 0 %} # if there is a setpoint for extruder
        {% if printer.extruder.temperature < printer.extruder.target %} # if not reached, heat
            _PRINT_AR T="Heating extruder from {printer.extruder.temperature}c to {printer.extruder.target}c."
            M109 S{printer.extruder.target|float}
        {% endif %}
    {% else %} # if no setpoint for extruder
        {% if printer.extruder.target < T_EXTRUDER %}  # heat to T.
            _PRINT_AR T="Heating extruder to {T_EXTRUDER}c."
            M109 S{T_EXTRUDER}
        {% endif %}
    {% endif %}
    _PRINT_AR T="The extruder has reached {T_EXTRUDER}c."    

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  CLEAR_BED # clear the bed
  CANCEL_PRINT_BASE

[gcode_macro M125]
gcode:
  PARK LOCATION='pause'

# Park toolhead
[gcode_macro PARK]
gcode:
  SAVE_GCODE_STATE NAME=parking
  {% set self = printer['gcode_macro _USER_VARIABLE'] %}
  {% set park = self.park %}
  {% set LOCATION = params.LOCATION|default('frontleftscrew') %}
  {% set RAISE = params.RAISE|default('true') %}

  _PRINT_AR T='Parking toolhead!'
  _PRINT_AR T='Moving to park position "{LOCATION}"'
  {% if RAISE == 'true' %}
    G91 # switch to relative positioning
    G0 Z20 F600 # increase the z position by 20mm
  {% endif %}
  G90 # switch to absolute positioning
  # TODO: figure out how to dynamically access nested objects as this bs below is disgusting
  {% if LOCATION == 'pause' %}
    G0 X{park.rearright.x} Y{park.rearright.y} F4000 # move to the rear right park position
  {% elif LOCATION == 'frontleftscrew' %}
    G0 X{park.frontleftscrew.x} Y{park.frontleftscrew.y} F4000 # move to the front left screw park position (home)
  {% elif LOCATION == 'rearright' %}
    G0 X{park.rearright.x} Y{park.rearright.y} F4000 # move to rear right park position
  {% elif LOCATION == 'rearcenter' %}
    G0 X{park.rearcenter.x} Y{park.rearcenter.y} F4000 # move to the rear center  park position
  {% elif LOCATION == 'rearleft' %}
    G0 X{park.rearleft.x} Y{park.rearleft.y} F4000 # move to the rear left park position
  {% elif LOCATION == 'frontright' %}
    G0 X{park.frontright.x} Y{park.frontright.y} F4000 # move to the front right park position
  {% elif LOCATION == 'frontcenter' %}
    G0 X{park.frontcenter.x} Y{park.frontcenter.y} F4000 # move to the front center park position
  {% elif LOCATION == 'frontleft' %}
    G0 X{park.frontleft.x} Y{park.frontleft.y} F4000 # move to the front left park position
  {% elif LOCATION == 'center' %}
    G0 X{park.center.x} Y{park.center.y} F4000 # move to the center park position
  {% else %}
    _PRINT_AR T='No park definition named "{LOCATION}" or it is not implemented. Falling back to the "pause" park location'
    G0 X{park.rearright.x} Y{park.rearright.y} F4000 # move to pause park position
  {% endif %}
  
  M400 # wait for park to complete
  _PRINT_AR T='Parking complete.'
  RESTORE_GCODE_STATE NAME=parking

[gcode_macro CLEAR_BED]
gcode:
  {% set self = printer['gcode_macro _USER_VARIABLE'] %}
  {% set bed = self.bed %}
  {% set sweep_count = params.SWEEP_COUNT|default(10)|int %}
  {% set sweep_size = (bed.max.x - bed.min.x) / sweep_count %}
  {% set safe_z = 0.5 %} # since our z = 0 position is calculated by the bl touch probe, and we also utilize the screws_tilt_calculate macro,
  # we can safely set safe_z to a small value

  _PRINT_AR T="Clearing the previous print from the bed..."
  {% if printer.heater_bed.temperature > 35 %}
    _PRINT_AR T="Waiting for bed to reach a temp lower than 35c"
    M190 S35 # wait for bed temp to reach 35c
    M400
    _PRINT_AR T="Temperature reached. Starting to clear the bed."
    M140 S0 # turn off the bed heater
  {% endif %}
  PARK LOCATION='rearright' RAISE='false' # move to the "rearright" park location
  # perform a single sweep to remove all objects > 30mm with the x-axis bar
  _PRINT_AR T="Performing initial sweep to remove objects with a height greater than 30mm"
  G90 # use absolute positioning
  G0 Z{safe_z} # move to safe z
  M400 # wait for move to complete
  G0 Y0 F8000 # move to y = 0
  M400 # wait for move to complete
  G0 Z35 F800 # move to z = 35
  M400 # wait for the move to complete
  PARK LOCATION='rearleft' RAISE='false' # move to the "rearleft" park location
  # in the "rearleft" park location, the toolhead is located at x=0 and y~230.
  # This allows us to immediately sweep in the -Y direction to clear any objects that are < 30mm
  # in height from the bed. This also clears any objects immediately in front of the toolhead
  
  # make 10 sweeps across the bed
  {% for sweep in range(sweep_count) %}
    _PRINT_AR T="Performing sweep {(sweep + 1)} out of {sweep_count}."
    G90 # use absolute positioning
    G0 Z{safe_z} F800 # move to safe_z
    M400 # wait for move to complete
    G0 Y0 F8000 # move to y = 0
    M400 # wait for move to complete
    G0 Z35 F800 # move the z axis up 35 mm. the x-axis bar is 30mm from the bed
    # we can assume that the first sweep will remove any objects >30mm in height from the bed
    G91 # use relative positioning
    G0 X{sweep_size} Y{bed.max.y} F8000 # shift over one sweep segment
    M400 # wait for move to complete
  {% endfor %}
  # finish the rest of the final sweep
  G90 # use aboslute positioning
  G0 Z{safe_z} F800 # move to safe_z
  M400 # wait for move to complete
  G0 Y0 F6000 # move to y = 0
  M400 # wait for move to complete.
  PARK LOCATION='rearright' RAISE='false'
  _PRINT_AR T="Bed clearing complete."

