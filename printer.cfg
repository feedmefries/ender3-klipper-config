[mcu]
serial: /dev/serial/by-id/usb-1a86_USB_Serial-if00-port0
restart_method: command

[printer]
kinematics: cartesian
max_velocity: 300
max_accel: 3000
max_z_velocity: 5
max_z_accel: 100

[board_pins]
aliases:
  EXP1_1=PC6,EXP1_3=PB10,EXP1_5=PB14,EXP1_7=PB12,EXP1_9=<GND>,
  EXP1_2=PB2,EXP1_4=PB11,EXP1_6=PB13,EXP1_8=PB15,EXP1_10=<5V>,
  PROBE_IN=PB0,PROBE_OUT=PB1,FIL_RUNOUT=PC6

# [display]
# lcd_type: st7920
# cs_pin: PB12
# sclk_pin: PB13
# sid_pin: PB15
# encoder_pins: ^PB14, ^PB10
# click_pin: ^!PB2

#  macro that run at klipper start
[delayed_gcode _INIT]
initial_duration: 1
gcode:
  _USER_VARIABLE # initialize printer variables
  _CHECK_CONSITENT # ensure that all necessary prerequisites are configured 
  _EXECUTE_AT_INIT # execute init code

[gcode_macro _EXECUTE_AT_INIT]
description: Helper: Everything that should run at klipper start
gcode:
  _PRINT_AR T="Homing..."
  G28 # home
  SCREWS_TILT_CALCULATE
  _PRINT_AR T="Klipper INIT done"

[gcode_macro _CHECK_CONSITENT]
description: Helper: Check that some criterias are meet in the printer.cfg
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  {% set text = ["CONFIG: ERROR"] %}
  {% if user.run is not defined %}
    {% set _dummy = text.append("_USER_VARIABLE macro missing") %}
  {% elif not user.run %}
    {% set _dummy = text.append("_USER_VARIABLE macro not executed") %}
  {% endif %}
  {% if 'save_variables' not in printer %}
    {% set _dummy = text.append("[save_variables] missing") %}
  {% endif %}
  {% if 'virtual_sdcard' not in printer %}
    {% set _dummy = text.append("[virtual_sdcard] missing") %}
  {% endif %}
  {% if text|length > 1 %}
    {action_respond_info(text|join("\n"))}
  {% endif %}

[gcode_macro _USER_VARIABLE]
description: Helper: Contains User defined printer variables
# variable_probe: {}
variable_bed: {}
variable_park: {}
variable_filament: {}
variable_unload_sd: False
variable_prime: {}
variable_run: False
gcode:
  {% set user_z_endstop_hop = 7.5 %}           # z hop for moves e.g homimg
  {% set user_z_home_current = 0.3 %}          # reduced homing curent for z
  {% set user_home_accel = 1200 %}             # reduced ACCEL for homing
  {% set user_bed_y_offset = 14 %}             # Endstop offset to bed max y
  ##### Probe #####
  {% set user_z_probe_hop = 5 %}               # z minimum heigh to avoid crash
  ##### Park Position #####
  {% set user_park_z_max_delta = 40 %}         #
  {% set user_park_z_min = 30 %}               # minimal z from bed
  {% set user_park_pause_z_delta = 2.0 %}      # distance to increase head while PAUSE/CANCEL_PRINT
  {% set user_park_at_cancel = True %}         # park head at CANCEL_PRINT if not paused [False/True]
  ##### Filament #####
  {% set user_extruder_min_add = 30 %}         ; Temperature add to min Extruder temp
  {% set user_load_distance = 90 %}            ; load distance while load filament
  {% set user_load_extrude = 50 %}             ; extrude distance while load filament
  {% set user_unload_distance = 75 %}          ; unload distance while unload filament
  {% set user_retract_end = 2 %}               ; retract distance at PRINT_END or CANCEL_PRINT
  {% set user_retract_pause = 1 %}             ; retract/extrude distance while PAUSE or RESUME
  ##### PRINT_START/STOP #####
  {% set user_print_start_bed_up = 10 %}       ; bed temp raise for faster heat soak
  {% set user_print_start_ival = 1 %}          ; wait time per call in sec
  {% set user_print_start_extruder_time = 3 %} ; time in minutes before soak end to start extruder heating 
  {% set user_print_start_bed_time = 3 %}      ; time in minutes before soak end to set bed target temp
  {% set user_print_start_prime_mult = 2 %}    ; multiplier for prime line hight 
  {% set user_unload_sd = True %}              # unload sd file at PRINT_END or CANCEL_PRINT [True,False]
  ##### Prime Line #####
  {% set user_prime_start_xy = [2.0,20.0] %}   # the starting coordinates of the prime line
  {% set user_prime_z = 0.34 %}                # the prime line layer height
  {% set user_prime_dir = 'Y+' %}              # the direction of prime line (X+, X-, Y+, Y-)
  {% set user_prime_spacing = 0.4 %}           # distance between lines, move will allways be in the positive direction
  {% set user_prime_length = 220 %}            # the length of prime line
  {% set user_prime_seg = 11 %}                # the segments in that the prime line is splitted
  {% set user_prime_extrude_per_seg = 2 %}     # amount of filament extruded per segment in mm
  ###################################################################
  ##                      end of user defines                      ## 
  ###################################################################
  {% set min = {'x': -3, 'y': -14, 'z': 0 } %}
  {% set max = {'x': 260, 'y': 230, 'z': 240 } %}
  # calculate necessary values
  {% set bed = {'min': {'x': 0, 'y': 0, 'z': 0    },
                'max': {'x': 230, 'y': max.y, 'z': max.z},
                'screws': {
                  'frontleft':  {'x': 79,  'y': 40},
                  'frontright': {'x': 246, 'y': 40} # todo: finish the rest of the screws. coordinates are found in bed_leveling.cfg
                }} %}
  {% set calc_center = {'x': (bed.max.x - bed.min.x) / 2,
                        'y': (bed.max.y - bed.min.y) / 2, 
                        'z': (bed.max.z - bed.min.z) / 2} %}
  {% set calc_park = {'min': {'x': (min.x + 1),
                              'y': (min.y + 1),
                              'z': min.z},
                      'max': {'x': (max.x - 1),
                              'y': (max.y - 1),
                              'z': max.z - user_park_z_max_delta}} %}
  # prepare dictonaries
  {% set park_dic = {'center'         : {'x': calc_center.x,   'y': calc_center.y },
                     'frontleftscrew' : {'x': bed.screws.frontleft.x, 'y': bed.screws.frontleft.y },
                     'frontleft'      : {'x': calc_park.min.x, 'y': calc_park.min.y},
                     'frontcenter'    : {'x': calc_center.x,   'y': calc_park.min.y},
                     'frontright'     : {'x': calc_park.max.x, 'y': calc_park.min.y},
                     'rearleft'       : {'x': calc_park.min.x, 'y': calc_park.max.y},
                     'rearcenter'     : {'x': calc_center.x,   'y': calc_park.max.y},
                     'rearright'      : {'x': calc_park.max.x, 'y': calc_park.max.y},
                     'z'              : {'min': calc_park.min.z, 'max': calc_park.max.z },
                     'park_at_cancel' : user_park_at_cancel} %}
  {% set filament_dic = {'load_distance'    : user_load_distance,
                          'load_extrude'    : user_load_extrude,
                          'unload_distance' : user_unload_distance,
                          'retract'         : {'end'   : user_retract_end,
                                              'pause' : user_retract_pause,
                                              'cancel': user_retract_end - user_retract_pause}} %}
  {% set prime_dic = {'pos'             : {'x':user_prime_start_xy[0], 'y':user_prime_start_xy[1], 'z':user_prime_z},
                      'dir'             : user_prime_dir,
                      'spacing'         : user_prime_spacing,
                      'length_per_seg'  : user_prime_length / user_prime_seg,
                      'seg'             : user_prime_seg,
                      'extrude_per_seg' : user_prime_extrude_per_seg} %}
  # store results in variables
  _PRINT_AR T="bed: {bed}"
  _PRINT_AR T="park: {park_dic}"
  _PRINT_AR T="filament: {filament_dic}"
  _PRINT_AR T="unload sd: {user_unload_sd}"
  _PRINT_AR T="prime: {prime_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=bed VALUE="{bed}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=park VALUE="{park_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=filament VALUE="{filament_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=unload_sd VALUE={user_unload_sd}
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=prime VALUE="{prime_dic}"
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=run VALUE=True

[save_variables]
filename: /home/pi/klipper_config/.variables.stb
[virtual_sdcard]
path: ~/gcode_files
[display_status]

[pause_resume]

[exclude_object]

[include beeper.cfg]
[include stepper.cfg]
[include heater.cfg]
[include fans.cfg]
[include bed_leveling.cfg]
[include macros.cfg]
[include pressure_advance.cfg]

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [bed_mesh ender3]
#*# version = 1
#*# points =
#*# 	  3.868125, 3.921250, 3.888125
#*# 	  3.715625, 3.776875, 3.791250
#*# 	  3.835625, 3.935000, 3.904375
#*# tension = 0.2
#*# min_x = 54.0
#*# algo = bicubic
#*# y_count = 3
#*# mesh_y_pps = 2
#*# min_y = 18.0
#*# x_count = 3
#*# max_y = 202.0
#*# mesh_x_pps = 2
#*# max_x = 200.0
